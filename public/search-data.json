[
  {
    "id": "api/built-in-components",
    "title": "Built-in Components Reference",
    "content": "Built-in Components Muni provides a set of powerful components that are globally available in all your MDX files. These are designed to help you create rich, structured content without needing to import them. Callouts Callouts are used to highlight a block of text. They are created using the  container directive. -   Directive:  -   Supported Types: , , ,  stepsh4:::steps CodeGroup A component for displaying multiple code blocks in a tabbed view. -   Directive:  ts [TypeScript] const message: string = \"Hello\"; js [JavaScript] const message = \"Hello\"; Aside<Aside>",
    "url": "/docs/api/built-in-components",
    "tags": []
  },
  {
    "id": "api/configuration",
    "title": "Configuration Reference",
    "content": "Configuration Configuration for a Muni project is handled in two main places:  for site-specific settings like navigation, and  for the underlying MDX and Next.js behavior. This is the primary configuration file for your site's content and navigation. It exports a  object.  Interface -   Type:  -   Description: The main title of your documentation site. It's used in the browser tab, metadata, and can be used in your site header. -   Type:  -   Description: An array of objects that defines the structure of your sidebar navigation. Each  has the following properties: -    (string): The text displayed in the navigation sidebar. -    (string): The URL slug for the page. This must match the file path in  (without the  extension). For the homepage, use . -    (optional ): An optional array of nested navigation items to create collapsible sections in the sidebar. Example Configuration This file controls the Next.js build process, including how MDX files are handled. Muni comes with a pre-configured set of Remark and Rehype plugins to add advanced features to your Markdown. Default Plugins Muni's default configuration includes plugins for: -   GFM (GitHub Flavored Markdown): Adds support for tables, strikethroughs, etc. -   Frontmatter: Parses the YAML frontmatter from your files. -   Code Block Titles: Adds titles to code blocks. -   Callouts: Enables  directives for callouts. -   Steps: Enables the  component. -   Slug & Autolink Headings: Automatically adds s to headings and links them. Customizing Plugins You can add your own Remark or Rehype plugins by modifying the  object in .",
    "url": "/docs/api/configuration",
    "tags": []
  },
  {
    "id": "api/frontmatter",
    "title": "Frontmatter Reference",
    "content": "Frontmatter Reference Frontmatter is the YAML block at the top of your MDX files, enclosed by triple dashes (). It allows you to provide metadata for each page. Standard Properties These are the primary properties that Muni uses to control page rendering and SEO. -   Type:  -   Required:  -   Description: The main title of the page. It is displayed at the top of the page content and used in the browser tab title (). -   Type:  -   Required:  -   Description: A brief summary of the page content. This is critical for SEO as it is used for the  tag, and it also powers the text snippets in the site's search results. Custom Properties You can add any other custom properties to your frontmatter. These properties are not used by Muni out-of-the-box, but they can be accessed from your own custom components or during the build process. Example with Custom Metadata Accessing Custom Frontmatter While Muni doesn't use custom frontmatter directly, you can configure your project to read it. For example, you could create a custom component that reads the  and  from the page's frontmatter. This typically requires customizing the MDX loader or creating a wrapper component that has access to the page's metadata. The frontmatter is available to the page layout component.",
    "url": "/docs/api/frontmatter",
    "tags": []
  },
  {
    "id": "api",
    "title": "API Reference",
    "content": "API Reference This section provides a detailed technical reference for the key APIs and configuration surfaces in Muni. Use these guides to understand all the available options for customizing and extending your documentation site. Reference Documents <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\"> <a href=\"/docs/api/configuration\" className=\"border p-4 rounded-lg hover:bg-accent\">   <h3 class=\"font-semibold text-lg mb-2\">Configuration</h3>   <p class=\"text-sm text-muted-foreground\">Explore all the options available in the  and  files.</p> </a> <a href=\"/docs/api/frontmatter\" className=\"border p-4 rounded-lg hover:bg-accent\">   <h3 class=\"font-semibold text-lg mb-2\">Frontmatter</h3>   <p class=\"text-sm text-muted-foreground\">A complete reference for all the standard and custom frontmatter properties you can use in your MDX files.</p> </a> <a href=\"/docs/api/built-in-components\" className=\"border p-4 rounded-lg hover:bg-accent\">   <h3 class=\"font-semibold text-lg mb-2\">Built-in Components</h3>   <p class=\"text-sm text-muted-foreground\">A detailed look at the props and usage of all the globally available components like  and .</p> </a> </div>",
    "url": "/docs/api",
    "tags": []
  },
  {
    "id": "getting-started",
    "title": "Getting Started",
    "content": "Getting Started Welcome to Muni! This guide will walk you through setting up a new documentation project. We recommend using the official Muni template to get started. Prerequisites Before you begin, make sure you have the following installed: - Node.js (version 18 or higher) - pnpm (recommended, but npm or yarn will also work) Installation Follow these steps to get your documentation site up and running. 1. Clone the Repository Start by cloning the Muni starter template from GitHub. 2. Navigate to Project Directory Change into your newly created project folder. 3. Install Dependencies Install all the necessary dependencies using . 4. Run the Development Server Start the Next.js development server to see your site in action. Your site should now be running at . Changes you make to the content will be automatically reflected. Next Steps Now that your site is running, you can start creating content and customizing the project. - Learn about the project layout in the [Project Structure](/docs/project-structure) guide. - Start writing your first pages by following the [Writing Content](/docs/guide/writing-content) guide.",
    "url": "/docs/getting-started",
    "tags": []
  },
  {
    "id": "guide/code-blocks",
    "title": "Advanced Code Blocks",
    "content": "Advanced Code Blocks Muni uses an advanced MDX processing pipeline to give you powerful features for displaying code. Here's a comprehensive guide to all the available features. Syntax Highlighting Basic syntax highlighting is available by specifying the language after the opening code fence. tsx function MyComponent() {   return <div>Hello, World!</div>; } [] Line Numbers & Highlighting To display line numbers, add  to the meta string. You can highlight specific lines by providing numbers in curly braces . You can specify single lines, ranges, or a combination. tsx [MyComponent.tsx] showLineNumbers {1, 3-4} function MyComponent() {   // This is the first line   return <div>Hello, World!</div>; // This line will be highlighted } diffdiff+- Including Files You can include content directly from a source file within your project. This is extremely useful for keeping your documentation in sync with your actual code. Use the  directive with a path to the file from the project root. tsx [components/ui/button.tsx] // [!include ~/components/ui/button.tsx] code-group",
    "url": "/docs/guide/code-blocks",
    "tags": []
  },
  {
    "id": "guide/creating-plugins",
    "title": "Creating Plugins",
    "content": "Creating Custom Plugins Muni's MDX processing pipeline is built on a powerful and extensible plugin system. You can tap into this system to add your own custom syntax, transform code blocks, or manipulate the final HTML output. This guide will walk you through the process of creating and adding your own plugins. Understanding Plugin Types There are three types of plugins you can create, each running at a different stage of the build process: 1.  Remark Plugins: Operate on the Markdown Abstract Syntax Tree (AST). They are perfect for adding new Markdown syntax or transforming content before it's converted to HTML. 2.  Rehype Plugins: Operate on the HTML AST after the Markdown has been converted. Use these to modify the HTML structure, add classes, or perform other post-processing tasks. 3.  Shiki Transformers: Run during the syntax highlighting process for code blocks. Use these to add custom features to your code blocks, like titles, line numbers, or custom highlighting. Tutorial: Creating a Remark Plugin Let's create a simple Remark plugin that adds a custom \"spoiler\" directive. We want to be able to write  in our MDX and have it render as a collapsible details element. Step 1: Create the Plugin File Create a new file for your plugin, for example, in . Step 2: Register the Plugin Now, add your new plugin to the  array in your . Step 3: Use the Directive You can now use your new directive in any MDX file. This will be rendered as a native  and  element, giving you a working spoiler component with just a few lines of code. Creating Rehype and Shiki Plugins The process for creating Rehype and Shiki plugins is similar: -   For Rehype: Your plugin will receive an HTML AST (). You can use  to find and modify HTML elements. -   For Shiki: Your transformer will receive the code string and the Shiki AST. This is more advanced and is used for fine-grained control over code block rendering. Refer to the official documentation for [Remark](https://github.com/remarkjs/remark/blob/main/doc/plugins.md), [Rehype](https://github.com/rehypejs/rehype/blob/main/doc/plugins.md), and [Shiki](https://shiki.style/guide/transformers) for more detailed API information. Best Practices -   Do One Thing Well: Keep your plugins focused on a single task. -   Use TypeScript: The ASTs have complex types. Using TypeScript will save you a lot of time and prevent errors. -   Handle Errors: If your plugin reads files or performs other I/O, make sure to handle potential errors gracefully. -   Follow Existing Patterns: Look at the existing plugins in the  directory to see how they are structured and written.",
    "url": "/docs/guide/creating-plugins",
    "tags": []
  },
  {
    "id": "guide",
    "title": "Guides",
    "content": "Guides This section provides practical guides for the most common tasks you'll encounter when building your documentation site with Muni. Whether you're creating new pages, adding complex code examples, or using custom components, these guides will walk you through the process step-by-step. Core Skills <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\"> <a href=\"/docs/guide/writing-content\" className=\"border p-4 rounded-lg hover:bg-accent\">   <h3 class=\"font-semibold text-lg mb-2\">Writing Content</h3>   <p class=\"text-sm text-muted-foreground\">Learn how to create new pages, use MDX syntax, and add frontmatter to your documents.</p> </a> <a href=\"/docs/guide/code-blocks\" className=\"border p-4 rounded-lg hover:bg-accent\">   <h3 class=\"font-semibold text-lg mb-2\">Advanced Code Blocks</h3>   <p class=\"text-sm text-muted-foreground\">Master the powerful features of Muni's code blocks, including titles, line highlighting, diffs, and more.</p> </a> <a href=\"/docs/guide/using-components\" className=\"border p-4 rounded-lg hover:bg-accent\">   <h3 class=\"font-semibold text-lg mb-2\">Using Components</h3>   <p class=\"text-sm text-muted-foreground\">Discover how to use built-in components and embed your own custom React components within your MDX content.</p> </a> <a href=\"/docs/guide/creating-plugins\" className=\"border p-4 rounded-lg hover:bg-accent\">   <h3 class=\"font-semibold text-lg mb-2\">Creating Plugins</h3>   <p class=\"text-sm text-muted-foreground\">Extend Muni's functionality by creating your own custom Remark, Rehype, and Shiki plugins.</p> </a> </div>",
    "url": "/docs/guide",
    "tags": []
  },
  {
    "id": "guide/using-components",
    "title": "Using Components",
    "content": "Using Components in MDX One of the most powerful features of MDX is the ability to use React components directly in your Markdown content. Muni provides a set of useful built-in components and makes it easy to use your own. Built-in Components Muni includes several components designed to help you create well-structured, readable documentation. These are available globally in all  files. Callouts Use callouts to highlight important information, warnings, or tips. They are created using the  directive. Steps The  component is perfect for creating step-by-step tutorials or guides. It automatically numbers the steps for you. Other Components Muni also provides other useful components like , , and . For a full list and their options, see the [Built-in Components Reference](/docs/api/built-in-components). Using Your Own Components You can import and use any React component in your MDX files, just like you would in any other React file. 1. Create Your Component First, create your component file. For example, a simple  component. 2. Import and Use in MDX Now, import it at the top of your  file and use it like any other HTML tag. This approach allows you to create highly interactive and dynamic documentation pages, from charts and graphs to live code editors.",
    "url": "/docs/guide/using-components",
    "tags": []
  },
  {
    "id": "guide/writing-content",
    "title": "Writing Content",
    "content": "Writing Content Creating content in Muni is straightforward. All of your pages are just MDX files located in the  directory. The file path of your MDX file determines its public URL. Creating a New Page 1.  Create a file: Add a new  file inside . For example, . 2.  Add content: Write your content using Markdown and MDX syntax. 3.  Update navigation: Open  and add a new entry to the  array. This will make your page appear in the sidebar.      Your new page will now be available at . Using MDX MDX is Markdown with the power of React components. This means you can write standard Markdown, but also import and use components right in your content. To learn more about using components, see the [Using Components](/docs/guide/using-components) guide. Frontmatter Frontmatter is a small block of YAML at the top of your MDX file that allows you to add metadata to your page. It's enclosed by triple-dashed lines (). Core Properties -    (string): The main title of the page. This is used for the browser tab title and at the top of the page. -    (string): A brief summary of the page's content. This is crucial for SEO and for the site's internal search. For a complete list of all available frontmatter options, see the [Frontmatter API Reference](/docs/api/frontmatter).",
    "url": "/docs/guide/writing-content",
    "tags": []
  },
  {
    "id": "index",
    "title": "Introduction",
    "content": "Welcome to Muni Muni is a powerful, modern documentation engine built with Next.js, MDX, and Tailwind CSS. It's designed from the ground up to make creating beautiful, fast, and feature-rich documentation sites a seamless experience. Whether you're documenting a software project, an API, or a design system, Muni provides the tools you need in a \"batteries-included\" package that is still fully customizable. Key Features Muni comes packed with features that enhance both the authoring and reading experience. Write in MDX Go beyond standard Markdown. With [MDX](https://mdxjs.com/), you can embed custom React components directly into your documentation, creating rich, interactive content with ease. Feature-Rich Code Blocks Present code beautifully with syntax highlighting, file names, line numbers, diffs, and even include code directly from your source files. Group related snippets into a single, tabbed component. Built-in Components A suite of carefully crafted components like callouts, steps, and asides are available out-of-the-box to help you structure your content effectively. Blazing Fast Performance Built on [Next.js](https://nextjs.org), Muni sites are statically generated by default. This means your documentation loads instantly, providing a great user experience and a boost for SEO. Customizable & Themeable Leverage the full power of [Tailwind CSS](https://tailwindcss.com/) to customize the look and feel of your site. The default theme is just a starting point. Integrated Search Powerful, client-side search is built-in, allowing your users to find the information they need in an instant. Our Philosophy We believe that documentation should be a joy to write and to read. Muni aims to remove the friction from the process by providing a robust, feature-complete foundation, so you can focus on what matters most: your content. Ready to get started? Check out the [Getting Started](/docs/getting-started) guide.",
    "url": "/docs/index",
    "tags": []
  },
  {
    "id": "project-structure",
    "title": "Project Structure",
    "content": "Project Structure Understanding the file and directory structure of a Muni project is key to customizing your site and knowing where to add new content. Here is a high-level overview of the most important parts of the project. Key Directories This is where you'll spend most of your time. All of your documentation pages, written in MDX (), live in this directory. The file structure here maps directly to the URL structure of your site. The core Next.js App Router structure for the documentation pages. The layout file  is a great place to customize the overall page structure, like the sidebar and header. This directory contains all the React components. It's split into two main subdirectories: - : Contains components that are intended to be used directly in your MDX files (e.g., , ). - : Contains the low-level UI building blocks, like buttons, dialogs, and inputs, powered by . Contains the business logic of the application. This includes custom hooks, search logic, and the powerful Remark and Rehype plugins that process your Markdown and add features like code block titles and callouts. This directory is responsible for mapping standard Markdown elements (like , , ) to custom React components. This is how the default styling is applied to your content. You can edit the files here to change how your content is rendered. For all static assets. Any file in this directory can be referenced directly by its URL (e.g., ). Key Files This is the heart of your site's navigation. Here, you define the structure of your sidebar by listing all the pages and creating nested hierarchies. You also set the site title here. This file configures Next.js itself. For Muni, its primary role is to set up the MDX loader and register all the Remark and Rehype plugins that give your Markdown superpowers.",
    "url": "/docs/project-structure",
    "tags": []
  }
]