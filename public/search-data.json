[
  {
    "id": "api/built-in-components",
    "title": "Built-in Components Reference",
    "content": "Built-in Components [The Toolbox] Muni provides a set of powerful components that are globally available in all your MDX files. These are designed to help you create rich, structured content without needing to import them. Callouts Callouts are used to highlight a block of text. They are created using the  container directive. - Directive:  - Supported Types: , , ,  Steps The  component creates an ordered, numbered list of steps, perfect for tutorials. It automatically numbers any  heading within it. - Directive:  CodeGroup A component for displaying multiple code blocks in a tabbed view. - Directive:  ts [TypeScript] const message: string = \"Hello\"; js [JavaScript] const message = \"Hello\"; Aside<Aside>",
    "url": "/docs/api/built-in-components",
    "tags": []
  },
  {
    "id": "api/configuration",
    "title": "Configuration Reference",
    "content": "Configuration [The Control Panel] Configuration for a Muni project is handled in two main places:  for site-specific settings like navigation, and  for the underlying MDX and Next.js behavior. This is the primary configuration file for your site's content and navigation. It exports a  object.  Interface - Type:  - Description: The main title of your documentation site. It's used in the browser tab, metadata, and can be used in your site header. - Type:  (optional) - Description: A version string for your project, which is displayed in the site header. - Type:  (optional) - Default:  - Description: Whether to display the author and date from the frontmatter at the bottom of each page. - Type:  (optional) - Description: An array of link objects to be displayed in the site header, next to the version. - Type:  - Description: An array of objects that defines the structure of your sidebar navigation. Each  has the following properties: -  (string): The text displayed in the navigation sidebar. -  (string): The URL slug for the page. This must match the file path in  (without the  extension). For the homepage, use . -  (optional ): An optional array of nested navigation items to create collapsible sections in the sidebar. Example Configuration This file controls the Next.js build process, including how MDX files are handled. Muni comes with a pre-configured set of Remark and Rehype plugins to add advanced features to your Markdown. Default Plugins Muni's default configuration includes plugins for: - GFM (GitHub Flavored Markdown): Adds support for tables, strikethroughs, etc. - Frontmatter: Parses the YAML frontmatter from your files. - Code Block Titles: Adds titles to code blocks. - Callouts: Enables  directives for callouts. - Steps: Enables the  component. - Slug & Autolink Headings: Automatically adds s to headings and links them. Customizing Plugins You can add your own Remark or Rehype plugins by modifying the  object in .",
    "url": "/docs/api/configuration",
    "tags": []
  },
  {
    "id": "api/frontmatter",
    "title": "Frontmatter Reference",
    "content": "Frontmatter Reference [Page Metadata] Frontmatter is the YAML block at the top of your MDX files, enclosed by triple dashes (). It allows you to provide metadata for each page. Standard Properties These are the primary properties that Muni uses to control page rendering and SEO. -   Type:  -   Required:  -   Description: The main title of the page. It is displayed at the top of the page content and used in the browser tab title (). -   Type:  -   Required:  -   Description: A brief summary of the page content. This is critical for SEO as it is used for the  tag, and it also powers the text snippets in the site's search results. Custom Properties You can add any other custom properties to your frontmatter. These properties are not used by Muni out-of-the-box, but they can be accessed from your own custom components or during the build process. Example with Custom Metadata Accessing Custom Frontmatter While Muni doesn't use custom frontmatter directly, you can configure your project to read it. For example, you could create a custom component that reads the  and  from the page's frontmatter. This typically requires customizing the MDX loader or creating a wrapper component that has access to the page's metadata. The frontmatter is available to the page layout component.",
    "url": "/docs/api/frontmatter",
    "tags": []
  },
  {
    "id": "api",
    "title": "API Reference",
    "content": "API Reference [Technical Details] This section provides a detailed technical reference for the key APIs and configuration surfaces in Muni. Use these guides to understand all the available options for customizing and extending your documentation site. Reference Documents <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\"> <a href=\"/docs/api/configuration\" className=\"border p-4 rounded-lg hover:bg-accent\">   <h3 class=\"font-semibold text-lg mb-2\">Configuration</h3>   <p class=\"text-sm text-muted-foreground\">Explore all the options available in the  and  files.</p> </a> <a href=\"/docs/api/frontmatter\" className=\"border p-4 rounded-lg hover:bg-accent\">   <h3 class=\"font-semibold text-lg mb-2\">Frontmatter</h3>   <p class=\"text-sm text-muted-foreground\">A complete reference for all the standard and custom frontmatter properties you can use in your MDX files.</p> </a> <a href=\"/docs/api/built-in-components\" className=\"border p-4 rounded-lg hover:bg-accent\">   <h3 class=\"font-semibold text-lg mb-2\">Built-in Components</h3>   <p class=\"text-sm text-muted-foreground\">A detailed look at the props and usage of all the globally available components like  and .</p> </a> </div>",
    "url": "/docs/api",
    "tags": []
  },
  {
    "id": "components/accordion",
    "title": "Accordion",
    "content": "import { AccordionComponent } from '@/components/snippets/accordion'; Accordion [A vertically stacked set of interactive headings that each reveal a section of content.] <CodePreviewBlock> <AccordionComponent /> </CodePreviewBlock> Installation <Tabs>   <TabsItem value=\"cli\" label=\"CLI\">     :::code-group                  :::   </TabsItem>   <TabsItem value=\"manual\" label=\"MANUAL\">        </TabsItem> </Tabs> Anatomy Import Structure This is the basic structure of the component.",
    "url": "/docs/components/accordion",
    "tags": []
  },
  {
    "id": "components/alert-dialog",
    "title": "Alert Dialog",
    "content": "import { AlertDialogComponent } from '@/components/snippets/alert-dialog'; Alert Dialog [A modal dialog that interrupts the user with important content and expects a response.] <CodePreviewBlock> <AlertDialogComponent /> </CodePreviewBlock> Installation <Tabs>   <TabsItem value=\"cli\" label=\"CLI\">     :::code-group                  :::   </TabsItem>   <TabsItem value=\"manual\" label=\"MANUAL\">        </TabsItem> </Tabs> Anatomy Import Structure This is the basic structure of the component.",
    "url": "/docs/components/alert-dialog",
    "tags": []
  },
  {
    "id": "components/alert",
    "title": "Alert",
    "content": "import { AlertComponent } from '@/components/snippets/alert'; Alert [Displays a callout for user attention.] <CodePreviewBlock> <AlertComponent /> </CodePreviewBlock> Installation <Tabs>   <TabsItem value=\"cli\" label=\"CLI\">     :::code-group                  :::   </TabsItem>   <TabsItem value=\"manual\" label=\"MANUAL\">        </TabsItem> </Tabs> Anatomy Import Structure This is the basic structure of the component.",
    "url": "/docs/components/alert",
    "tags": []
  },
  {
    "id": "components/autocomplete",
    "title": "Autocomplete",
    "content": "import { AutocompleteComponent, AutocompleteGrouped, AutocompleteWithIndicator, AutocompleteMultiline, AutocompleteDisabled } from '@/components/snippets/autocomplete'; Autocomplete [An input field that provides suggestions as the user types.] <CodePreviewBlock> <AutocompleteComponent /> </CodePreviewBlock> Examples Grouped <CodePreviewBlock>   <AutocompleteGrouped /> </CodePreviewBlock> With Indicator <CodePreviewBlock>   <AutocompleteWithIndicator /> </CodePreviewBlock> Multiline <CodePreviewBlock>   <AutocompleteMultiline /> </CodePreviewBlock> Disabled <CodePreviewBlock>   <AutocompleteDisabled /> </CodePreviewBlock> Installation <Tabs>   <TabsItem value=\"cli\" label=\"CLI\">     :::code-group                  :::   </TabsItem>   <TabsItem value=\"manual\" label=\"MANUAL\">        </TabsItem> </Tabs> Anatomy Import Structure This is the basic structure of the component.",
    "url": "/docs/components/autocomplete",
    "tags": []
  },
  {
    "id": "components/avatar",
    "title": "Avatar",
    "content": "import { AvatarComponent } from '@/components/snippets/avatar'; Avatar [An image element with a fallback for representing a user.] <CodePreviewBlock> <AvatarComponent /> </CodePreviewBlock> Installation <Tabs>   <TabsItem value=\"cli\" label=\"CLI\">     :::code-group       :::   </TabsItem>   <TabsItem value=\"manual\" label=\"MANUAL\">        </TabsItem> </Tabs> Anatomy Import Structure This is the basic structure of the component.",
    "url": "/docs/components/avatar",
    "tags": []
  },
  {
    "id": "components/button",
    "title": "Button",
    "content": "import {   ButtonComponent,   ButtonSecondary,   ButtonOutline,   ButtonGhost,   ButtonDestructive,   ButtonSmall,   ButtonIcon,   ButtonLink,   ButtonDisabled,   ButtonWithIcon, } from \"@/components/snippets/button\"; Button [A button component with different variants.] <CodePreviewBlock> <ButtonComponent /> </CodePreviewBlock> Examples Secondary <CodePreviewBlock>   <ButtonSecondary /> </CodePreviewBlock> Outline <CodePreviewBlock>   <ButtonOutline /> </CodePreviewBlock> Ghost <CodePreviewBlock>   <ButtonGhost /> </CodePreviewBlock> Destructive <CodePreviewBlock>   <ButtonDestructive /> </CodePreviewBlock> Small <CodePreviewBlock>   <ButtonSmall /> </CodePreviewBlock> Icon <CodePreviewBlock>   <ButtonIcon /> </CodePreviewBlock> With icon <CodePreviewBlock>   <ButtonWithIcon /> </CodePreviewBlock> Link <CodePreviewBlock>   <ButtonLink /> </CodePreviewBlock> Disabled <CodePreviewBlock>   <ButtonDisabled /> </CodePreviewBlock> Installation <Tabs>   <TabsItem value=\"cli\" label=\"CLI\">     :::code-group                  :::   </TabsItem>   <TabsItem value=\"manual\" label=\"MANUAL\">        </TabsItem> </Tabs> Anatomy Import Structure This is the basic structure of the component.",
    "url": "/docs/components/button",
    "tags": []
  },
  {
    "id": "components/card",
    "title": "Card",
    "content": "import { CardComponent } from \"@/components/snippets/card\"; Card [A container for content with a header, content, and footer.] <CodePreviewBlock> <CardComponent /> </CodePreviewBlock> Installation <Tabs>   <TabsItem value=\"cli\" label=\"CLI\">     :::code-group                  :::   </TabsItem>   <TabsItem value=\"manual\" label=\"MANUAL\">        </TabsItem> </Tabs> Anatomy Import Structure This is the basic structure of the component.",
    "url": "/docs/components/card",
    "tags": []
  },
  {
    "id": "components/checkbox",
    "title": "Checkbox",
    "content": "import { CheckboxComponent } from \"@/components/snippets/checkbox\"; Checkbox [A control that allows the user to select one or more options.] <CodePreviewBlock> <CheckboxComponent /> </CodePreviewBlock> Installation <Tabs>   <TabsItem value=\"cli\" label=\"CLI\">   :::code-group :::   </TabsItem>   <TabsItem value=\"manual\" label=\"MANUAL\">        </TabsItem> </Tabs> Anatomy Import Structure This is the basic structure of the component.",
    "url": "/docs/components/checkbox",
    "tags": []
  },
  {
    "id": "components/collapsible",
    "title": "Collapsible",
    "content": "import { CollapsibleComponent } from '@/components/snippets/collapsible'; Collapsible [A component that can be expanded or collapsed.] <CodePreviewBlock> <CollapsibleComponent /> </CodePreviewBlock> Installation <Tabs>   <TabsItem value=\"cli\" label=\"CLI\">     :::code-group                  :::   </TabsItem>   <TabsItem value=\"manual\" label=\"MANUAL\">        </TabsItem> </Tabs> Anatomy Import Structure This is the basic structure of the component.",
    "url": "/docs/components/collapsible",
    "tags": []
  },
  {
    "id": "components/combobox",
    "title": "Combobox",
    "content": "import { ComboboxComponent, ComboboxSmall, ComboboxGrouped, ComboboxWithoutIndicator } from '@/components/snippets/combobox'; Combobox [An autocomplete component that combines a text input with a dropdown list.] <CodePreviewBlock> <ComboboxComponent /> </CodePreviewBlock> Examples Small <CodePreviewBlock>   <ComboboxSmall /> </CodePreviewBlock> Grouped <CodePreviewBlock>   <ComboboxGrouped /> </CodePreviewBlock> Without Indicator <CodePreviewBlock>   <ComboboxWithoutIndicator /> </CodePreviewBlock> Installation <Tabs>   <TabsItem value=\"cli\" label=\"CLI\">     :::code-group                  :::   </TabsItem>   <TabsItem value=\"manual\" label=\"MANUAL\">        </TabsItem> </Tabs> Anatomy Import Structure This is the basic structure of the component.",
    "url": "/docs/components/combobox",
    "tags": []
  },
  {
    "id": "components/context-menu",
    "title": "Context Menu",
    "content": "import { ContextMenuComponent } from '@/components/snippets/context-menu'; Context Menu [A menu that appears upon right-clicking an element.] <CodePreviewBlock> <ContextMenuComponent /> </CodePreviewBlock> Installation <Tabs>   <TabsItem value=\"cli\" label=\"CLI\">     :::code-group                  :::   </TabsItem>   <TabsItem value=\"manual\" label=\"MANUAL\">        </TabsItem> </Tabs> Anatomy Import Structure This is the basic structure of the component.",
    "url": "/docs/components/context-menu",
    "tags": []
  },
  {
    "id": "components/dialog",
    "title": "Dialog",
    "content": "import { DialogComponent } from '@/components/snippets/dialog'; Dialog [A window overlaid on either the primary window or another dialog window.] <CodePreviewBlock> <DialogComponent /> </CodePreviewBlock> Installation <Tabs>   <TabsItem value=\"cli\" label=\"CLI\">     :::code-group                  :::   </TabsItem>   <TabsItem value=\"manual\" label=\"MANUAL\">        </TabsItem> </Tabs> Anatomy Import Structure This is the basic structure of the component.",
    "url": "/docs/components/dialog",
    "tags": []
  },
  {
    "id": "components/dropdown",
    "title": "Dropdown Menu",
    "content": "import { DropdownComponent } from \"@/components/snippets/dropdown\"; Dropdown Menu [A menu that appears when a user clicks a trigger element.] <CodePreviewBlock> <DropdownComponent /> </CodePreviewBlock> Installation <Tabs>   <TabsItem value=\"cli\" label=\"CLI\">     :::code-group                  :::   </TabsItem>   <TabsItem value=\"manual\" label=\"MANUAL\">        </TabsItem> </Tabs> Anatomy Import Structure This is the basic structure of the component.",
    "url": "/docs/components/dropdown",
    "tags": []
  },
  {
    "id": "components/form",
    "title": "Form",
    "content": "import { FormComponent } from \"@/components/snippets/base-ui-form\"; Form [A component for building forms with validation.] <CodePreviewBlock> <FormComponent /> </CodePreviewBlock> Installation <Tabs>   <TabsItem value=\"cli\" label=\"CLI\">     :::code-group               :::   </TabsItem>   <TabsItem value=\"manual\" label=\"MANUAL\">        </TabsItem> </Tabs> Anatomy Import",
    "url": "/docs/components/form",
    "tags": []
  },
  {
    "id": "components",
    "title": "Components",
    "content": "Components This section provides a detailed look at all the UI components available in this documentation. Each component page includes a live preview, installation instructions, and usage examples. <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">   <a href=\"/docs/components/accordion\" className=\"border p-4 rounded-lg hover:bg-accent\">     <h3 class=\"font-semibold text-lg mb-2\">Accordion</h3>     <p class=\"text-sm text-muted-foreground\">A vertically stacked set of interactive headings that each reveal a section of content.</p>   </a>   <a href=\"/docs/components/alert\" className=\"border p-4 rounded-lg hover:bg-accent\">     <h3 class=\"font-semibold text-lg mb-2\">Alert</h3>     <p class=\"text-sm text-muted-foreground\">Displays a callout for user attention.</p>   </a>   <a href=\"/docs/components/alert-dialog\" className=\"border p-4 rounded-lg hover:bg-accent\">     <h3 class=\"font-semibold text-lg mb-2\">Alert Dialog</h3>     <p class=\"text-sm text-muted-foreground\">A modal dialog that interrupts the user with important content and expects a response.</p>   </a>   <a href=\"/docs/components/autocomplete\" className=\"border p-4 rounded-lg hover:bg-accent\">     <h3 class=\"font-semibold text-lg mb-2\">Autocomplete</h3>     <p class=\"text-sm text-muted-foreground\">An input field that provides suggestions as the user types.</p>   </a>   <a href=\"/docs/components/avatar\" className=\"border p-4 rounded-lg hover:bg-accent\">     <h3 class=\"font-semibold text-lg mb-2\">Avatar</h3>     <p class=\"text-sm text-muted-foreground\">An image element with a fallback for representing a user.</p>   </a>   <a href=\"/docs/components/button\" className=\"border p-4 rounded-lg hover:bg-accent\">     <h3 class=\"font-semibold text-lg mb-2\">Button</h3>     <p class=\"text-sm text-muted-foreground\">A button component with different variants.</p>   </a>   <a href=\"/docs/components/card\" className=\"border p-4 rounded-lg hover:bg-accent\">     <h3 class=\"font-semibold text-lg mb-2\">Card</h3>     <p class=\"text-sm text-muted-foreground\">A container for content with a header, content, and footer.</p>   </a>   <a href=\"/docs/components/checkbox\" className=\"border p-4 rounded-lg hover:bg-accent\">     <h3 class=\"font-semibold text-lg mb-2\">Checkbox</h3>     <p class=\"text-sm text-muted-foreground\">A control that allows the user to select one or more options.</p>   </a>   <a href=\"/docs/components/collapsible\" className=\"border p-4 rounded-lg hover:bg-accent\">     <h3 class=\"font-semibold text-lg mb-2\">Collapsible</h3>     <p class=\"text-sm text-muted-foreground\">A component that can be expanded or collapsed.</p>   </a>   <a href=\"/docs/components/combobox\" className=\"border p-4 rounded-lg hover:bg-accent\">     <h3 class=\"font-semibold text-lg mb-2\">Combobox</h3>     <p class=\"text-sm text-muted-foreground\">An autocomplete component that combines a text input with a dropdown list.</p>   </a>   <a href=\"/docs/components/context-menu\" className=\"border p-4 rounded-lg hover:bg-accent\">     <h3 class=\"font-semibold text-lg mb-2\">Context Menu</h3>     <p class=\"text-sm text-muted-foreground\">A menu that appears upon right-clicking an element.</p>   </a>   <a href=\"/docs/components/dialog\" className=\"border p-4 rounded-lg hover:bg-accent\">     <h3 class=\"font-semibold text-lg mb-2\">Dialog</h3>     <p class=\"text-sm text-muted-foreground\">A window overlaid on either the primary window or another dialog window.</p>   </a>   <a href=\"/docs/components/dropdown\" className=\"border p-4 rounded-lg hover:bg-accent\">     <h3 class=\"font-semibold text-lg mb-2\">Dropdown Menu</h3>     <p class=\"text-sm text-muted-foreground\">A menu that appears when a user clicks a trigger element.</p>   </a>   <a href=\"/docs/components/form\" className=\"border p-4 rounded-lg hover:bg-accent\">     <h3 class=\"font-semibold text-lg mb-2\">Form</h3>     <p class=\"text-sm text-muted-foreground\">A component for building forms with validation.</p>   </a>   <a href=\"/docs/components/popover\" className=\"border p-4 rounded-lg hover:bg-accent\">     <h3 class=\"font-semibold text-lg mb-2\">Popover</h3>     <p class=\"text-sm text-muted-foreground\">A pop-up that appears when a user clicks an element.</p>   </a>   <a href=\"/docs/components/preview-card\" className=\"border p-4 rounded-lg hover:bg-accent\">     <h3 class=\"font-semibold text-lg mb-2\">Preview Card</h3>     <p class=\"text-sm text-muted-foreground\">A card that shows a preview on hover.</p>   </a>   <a href=\"/docs/components/progress\" className=\"border p-4 rounded-lg hover:bg-accent\">     <h3 class=\"font-semibold text-lg mb-2\">Progress</h3>     <p class=\"text-sm text-muted-foreground\">A component to display progress of a task.</p>   </a>   <a href=\"/docs/components/radio-group\" className=\"border p-4 rounded-lg hover:bg-accent\">     <h3 class=\"font-semibold text-lg mb-2\">Radio Group</h3>     <p class=\"text-sm text-muted-foreground\">A set of checkable buttons, where only one can be selected at a time.</p>   </a>   <a href=\"/docs/components/scroll-area\" className=\"border p-4 rounded-lg hover:bg-accent\">     <h3 class=\"font-semibold text-lg mb-2\">Scroll Area</h3>     <p class=\"text-sm text-muted-foreground\">A scrollable area with a custom scrollbar.</p>   </a>   <a href=\"/docs/components/select\" className=\"border p-4 rounded-lg hover:bg-accent\">     <h3 class=\"font-semibold text-lg mb-2\">Select</h3>     <p class=\"text-sm text-muted-foreground\">A control that allows users to select a value from a list.</p>   </a>   <a href=\"/docs/components/separator\" className=\"border p-4 rounded-lg hover:bg-accent\">     <h3 class=\"font-semibold text-lg mb-2\">Separator</h3>     <p class=\"text-sm text-muted-foreground\">A visual separator between elements.</p>   </a>   <a href=\"/docs/components/slider\" className=\"border p-4 rounded-lg hover:bg-accent\">     <h3 class=\"font-semibold text-lg mb-2\">Slider</h3>     <p class=\"text-sm text-muted-foreground\">A control that allows users to select a value from a range.</p>   </a>   <a href=\"/docs/components/switch\" className=\"border p-4 rounded-lg hover:bg-accent\">     <h3 class=\"font-semibold text-lg mb-2\">Switch</h3>     <p class=\"text-sm text-muted-foreground\">A control that can be toggled on or off.</p>   </a>   <a href=\"/docs/components/tabs\" className=\"border p-4 rounded-lg hover:bg-accent\">     <h3 class=\"font-semibold text-lg mb-2\">Tabs</h3>     <p class=\"text-sm text-muted-foreground\">A set of layered sections of content, known as tab panels, that are displayed one at a time.</p>   </a>   <a href=\"/docs/components/textarea\" className=\"border p-4 rounded-lg hover:bg-accent\">     <h3 class=\"font-semibold text-lg mb-2\">Textarea</h3>     <p class=\"text-sm text-muted-foreground\">A multi-line text input control.</p>   </a>   <a href=\"/docs/components/toast\" className=\"border p-4 rounded-lg hover:bg-accent\">     <h3 class=\"font-semibold text-lg mb-2\">Toast</h3>     <p class=\"text-sm text-muted-foreground\">A non-interactive, auto-expiring notification.</p>   </a>   <a href=\"/docs/components/toggle\" className=\"border p-4 rounded-lg hover:bg-accent\">     <h3 class=\"font-semibold text-lg mb-2\">Toggle</h3>     <p class=\"text-sm text-muted-foreground\">A two-state button that can be either on or off.</p>   </a>   <a href=\"/docs/components/toolbar\" className=\"border p-4 rounded-lg hover:bg-accent\">     <h3 class=\"font-semibold text-lg mb-2\">Toolbar</h3>     <p class=\"text-sm text-muted-foreground\">A container for grouping a set of controls.</p>   </a>   <a href=\"/docs/components/tooltip\" className=\"border p-4 rounded-lg hover:bg-accent\">     <h3 class=\"font-semibold text-lg mb-2\">Tooltip</h3>     <p class=\"text-sm text-muted-foreground\">A small pop-up that displays information when a user hovers over an element.</p>   </a> </div>",
    "url": "/docs/components",
    "tags": []
  },
  {
    "id": "components/popover",
    "title": "Popover",
    "content": "import { PopoverComponent } from \"@/components/snippets/popover\"; Popover [A pop-up that appears when a user clicks an element.] <CodePreviewBlock> <PopoverComponent /> </CodePreviewBlock> Installation <Tabs>   <TabsItem value=\"cli\" label=\"CLI\">     :::code-group                  :::   </TabsItem>   <TabsItem value=\"manual\" label=\"MANUAL\">        </TabsItem> </Tabs> Anatomy Import Structure This is the basic structure of the component.",
    "url": "/docs/components/popover",
    "tags": []
  },
  {
    "id": "components/preview-card",
    "title": "Preview Card",
    "content": "import { PreviewCardComponent } from \"@/components/snippets/preview-card\"; Preview Card [A card that shows a preview on hover.] <CodePreviewBlock> <PreviewCardComponent /> </CodePreviewBlock> Installation <Tabs>   <TabsItem value=\"cli\" label=\"CLI\">     :::code-group                  :::   </TabsItem>   <TabsItem value=\"manual\" label=\"MANUAL\">        </TabsItem> </Tabs> Anatomy Import Structure This is the basic structure of the component.",
    "url": "/docs/components/preview-card",
    "tags": []
  },
  {
    "id": "components/progress",
    "title": "Progress",
    "content": "import { ProgressComponent } from \"@/components/snippets/progress\"; Progress [A component to display progress of a task.] <CodePreviewBlock> <ProgressComponent /> </CodePreviewBlock> Installation <Tabs>   <TabsItem value=\"cli\" label=\"CLI\">     :::code-group                  :::   </TabsItem>   <TabsItem value=\"manual\" label=\"MANUAL\">        </TabsItem> </Tabs> Anatomy Import Structure This is the basic structure of the component.",
    "url": "/docs/components/progress",
    "tags": []
  },
  {
    "id": "components/radio-group",
    "title": "Radio Group",
    "content": "import { RadioGroupComponent } from \"@/components/snippets/radio-group\"; Radio Group [A set of checkable buttons, where only one can be selected at a time.] <CodePreviewBlock> <RadioGroupComponent /> </CodePreviewBlock> Installation <Tabs>   <TabsItem value=\"cli\" label=\"CLI\">     :::code-group                  :::   </TabsItem>   <TabsItem value=\"manual\" label=\"MANUAL\">        </TabsItem> </Tabs> Anatomy Import Structure This is the basic structure of the component.",
    "url": "/docs/components/radio-group",
    "tags": []
  },
  {
    "id": "components/scroll-area",
    "title": "Scroll Area",
    "content": "import { ScrollAreaComponent } from \"@/components/snippets/scroll-area\"; Scroll Area [A scrollable area with a custom scrollbar.] <CodePreviewBlock> <ScrollAreaComponent /> </CodePreviewBlock> Installation <Tabs>   <TabsItem value=\"cli\" label=\"CLI\">     :::code-group                  :::   </TabsItem>   <TabsItem value=\"manual\" label=\"MANUAL\">        </TabsItem> </Tabs> Anatomy Import Structure This is the basic structure of the component.",
    "url": "/docs/components/scroll-area",
    "tags": []
  },
  {
    "id": "components/select",
    "title": "Select",
    "content": "import { SelectComponent } from '@/components/snippets/select'; Select [A control that allows users to select a value from a list.] <CodePreviewBlock> <SelectComponent /> </CodePreviewBlock> Installation <Tabs>   <TabsItem value=\"cli\" label=\"CLI\">     :::code-group                  :::   </TabsItem>   <TabsItem value=\"manual\" label=\"MANUAL\">        </TabsItem> </Tabs> Anatomy Import Structure This is the basic structure of the component.",
    "url": "/docs/components/select",
    "tags": []
  },
  {
    "id": "components/separator",
    "title": "Separator",
    "content": "import { SeparatorComponent } from '@/components/snippets/separator'; Separator [A visual separator between elements.] <CodePreviewBlock> <SeparatorComponent /> </CodePreviewBlock> Installation <Tabs>   <TabsItem value=\"cli\" label=\"CLI\">     :::code-group                  :::   </TabsItem>   <TabsItem value=\"manual\" label=\"MANUAL\">        </TabsItem> </Tabs> Anatomy Import Structure This is the basic structure of the component.",
    "url": "/docs/components/separator",
    "tags": []
  },
  {
    "id": "components/slider",
    "title": "Slider",
    "content": "import { SliderComponent } from \"@/components/snippets/slider\"; Slider [A control that allows users to select a value from a range.] <CodePreviewBlock> <SliderComponent /> </CodePreviewBlock> Installation <Tabs>   <TabsItem value=\"cli\" label=\"CLI\">     :::code-group                  :::   </TabsItem>   <TabsItem value=\"manual\" label=\"MANUAL\">        </TabsItem> </Tabs> Anatomy Import Structure This is the basic structure of the component.",
    "url": "/docs/components/slider",
    "tags": []
  },
  {
    "id": "components/switch",
    "title": "Switch",
    "content": "import { SwitchComponent } from \"@/components/snippets/switch\"; Switch [A control that can be toggled on or off.] <CodePreviewBlock> <SwitchComponent /> </CodePreviewBlock> Installation <Tabs>   <TabsItem value=\"cli\" label=\"CLI\">     :::code-group                  :::   </TabsItem>   <TabsItem value=\"manual\" label=\"MANUAL\">        </TabsItem> </Tabs> Anatomy Import Structure This is the basic structure of the component.",
    "url": "/docs/components/switch",
    "tags": []
  },
  {
    "id": "components/tabs",
    "title": "Tabs",
    "content": "import { TabsComponent } from \"@/components/snippets/tabs\"; Tabs [A set of layered sections of content, known as tab panels, that are displayed one at a time.] <CodePreviewBlock> <TabsComponent /> </CodePreviewBlock> Installation <Tabs>   <TabsItem value=\"cli\" label=\"CLI\">     :::code-group                  :::   </TabsItem>   <TabsItem value=\"manual\" label=\"MANUAL\">        </TabsItem> </Tabs> Anatomy Import Structure This is the basic structure of the component.",
    "url": "/docs/components/tabs",
    "tags": []
  },
  {
    "id": "components/textarea",
    "title": "Textarea",
    "content": "import { TextareaComponent } from \"@/components/snippets/textarea\"; Textarea [A multi-line text input control.] <CodePreviewBlock> <TextareaComponent /> </CodePreviewBlock> Installation <Tabs>   <TabsItem value=\"cli\" label=\"CLI\">     :::code-group                  :::   </TabsItem>   <TabsItem value=\"manual\" label=\"MANUAL\">        </TabsItem> </Tabs> Anatomy Import Structure This is the basic structure of the component.",
    "url": "/docs/components/textarea",
    "tags": []
  },
  {
    "id": "components/toast",
    "title": "Toast",
    "content": "import { ToastComponent } from \"@/components/snippets/toast\"; Toast [A non-interactive, auto-expiring notification.] <CodePreviewBlock> <ToastComponent /> </CodePreviewBlock> Installation <Tabs>   <TabsItem value=\"cli\" label=\"CLI\">     :::code-group                  :::   </TabsItem>   <TabsItem value=\"manual\" label=\"MANUAL\">        </TabsItem> </Tabs> Anatomy Import Structure This is the basic structure of the component.",
    "url": "/docs/components/toast",
    "tags": []
  },
  {
    "id": "components/toggle",
    "title": "Toggle",
    "content": "import { ToggleComponent } from \"@/components/snippets/toggle\"; Toggle [A two-state button that can be either on or off.] <CodePreviewBlock> <ToggleComponent /> </CodePreviewBlock> Installation <Tabs>   <TabsItem value=\"cli\" label=\"CLI\">     :::code-group                  :::   </TabsItem>   <TabsItem value=\"manual\" label=\"MANUAL\">        </TabsItem> </Tabs> Anatomy Import Structure This is the basic structure of the component.",
    "url": "/docs/components/toggle",
    "tags": []
  },
  {
    "id": "components/toolbar",
    "title": "Toolbar",
    "content": "import { ToolbarComponent } from \"@/components/snippets/toolbar\"; Toolbar [A container for grouping a set of controls.] <CodePreviewBlock> <ToolbarComponent /> </CodePreviewBlock> Installation <Tabs>   <TabsItem value=\"cli\" label=\"CLI\">     :::code-group                  :::   </TabsItem>   <TabsItem value=\"manual\" label=\"MANUAL\">        </TabsItem> </Tabs> Anatomy Import Structure This is the basic structure of the component.",
    "url": "/docs/components/toolbar",
    "tags": []
  },
  {
    "id": "components/tooltip",
    "title": "Tooltip",
    "content": "import { TooltipComponent } from \"@/components/snippets/tooltip\"; Tooltip [A small pop-up that displays information when a user hovers over an element.] <CodePreviewBlock> <TooltipComponent /> </CodePreviewBlock> Installation <Tabs>   <TabsItem value=\"cli\" label=\"CLI\">     :::code-group                  :::   </TabsItem>   <TabsItem value=\"manual\" label=\"MANUAL\">        </TabsItem> </Tabs> Anatomy Import Structure This is the basic structure of the component.",
    "url": "/docs/components/tooltip",
    "tags": []
  },
  {
    "id": "getting-started",
    "title": "Getting Started",
    "content": "Getting Started [From Zero to Hero] Welcome to Muni! This guide will walk you through setting up a new documentation project. We recommend using the official Muni template to get started. Prerequisites Before you begin, make sure you have the following installed: - Node.js (version 18 or higher) - pnpm (recommended, but npm or yarn will also work) Installation Follow these steps to get your documentation site up and running. 1. Clone the Repository Start by cloning the Muni starter template from GitHub. 2. Navigate to Project Directory Change into your newly created project folder. 3. Install Dependencies Install all the necessary dependencies using . 4. Run the Development Server Start the Next.js development server to see your site in action. Your site should now be running at . Changes you make to the content will be automatically reflected. Next Steps Now that your site is running, you can start creating content and customizing the project. - Learn about the project layout in the [Project Structure](/docs/project-structure) guide. - Start writing your first pages by following the [Writing Content](/docs/guide/writing-content) guide.",
    "url": "/docs/getting-started",
    "tags": []
  },
  {
    "id": "index",
    "title": "Introduction",
    "content": "Welcome to base-ui base-ui is a comprehensive library of foundational UI components for React. It's designed to provide the building blocks you need to create beautiful, accessible, and consistent user interfaces with speed. Whether you're building a simple landing page or a complex web application, base-ui offers a set of unstyled, flexible components that can be easily adapted to your design system. Key Features Fully Customizable Components are delivered unstyled, giving you complete control over the look and feel. Use Tailwind CSS or any other styling solution to match your brand. Accessible Accessibility is a top priority. All components follow WAI-ARIA standards to ensure they are usable by everyone. Developer-Friendly With a simple and consistent API,  is designed to be a joy to use for developers. Comprehensive Set From basic buttons and inputs to complex components like Autocomplete and Dialogs,  provides a wide range of components to cover all your needs. Our Philosophy We believe that developers shouldn't have to reinvent the wheel for every project.  provides the robust, foundational components so you can focus on building unique features and user experiences. Ready to get started? Check out the [Components](/docs/components) section to see them in action.",
    "url": "/docs/index",
    "tags": []
  },
  {
    "id": "project-structure",
    "title": "Project Structure",
    "content": "Project Structure [The Lay of the Land] Understanding the file and directory structure of a Muni project is key to customizing your site and knowing where to add new content. Here is a high-level overview of the most important parts of the project. Key Directories This is where you'll spend most of your time. All of your documentation pages, written in MDX (), live in this directory. The file structure here maps directly to the URL structure of your site. The core Next.js App Router structure for the documentation pages. The layout file  is a great place to customize the overall page structure, like the sidebar and header. This directory contains all the React components. It's split into two main subdirectories: - : Contains components that are intended to be used directly in your MDX files (e.g., , ). - : Contains the low-level UI building blocks, like buttons, dialogs, and inputs, powered by . Contains the business logic of the application. This includes custom hooks, search logic, and the powerful Remark and Rehype plugins that process your Markdown and add features like code block titles and callouts. This directory is responsible for mapping standard Markdown elements (like , , ) to custom React components. This is how the default styling is applied to your content. You can edit the files here to change how your content is rendered. For all static assets. Any file in this directory can be referenced directly by its URL (e.g., ). Key Files This is the heart of your site's configuration. Here, you define the structure of your sidebar navigation, set the site title, version number, and configure links that appear in the main header. This file configures Next.js itself. For Muni, its primary role is to set up the MDX loader and register all the Remark and Rehype plugins that give your Markdown superpowers.",
    "url": "/docs/project-structure",
    "tags": []
  }
]